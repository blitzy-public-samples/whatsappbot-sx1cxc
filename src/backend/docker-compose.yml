version: "3.9"

services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      - redis
      - postgres
      - minio
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    secrets:
      - db_password
      - jwt_secret
    configs:
      - source: logging_config
        target: /app/config/logging.conf

  # Message Service (Go)
  message-service:
    build:
      context: ./message-service
      dockerfile: Dockerfile
    environment:
      - GO_ENV=production
    depends_on:
      - redis
      - postgres
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true

  # Contact Service (Python)
  contact-service:
    build:
      context: ./contact-service
      dockerfile: Dockerfile
    environment:
      - PYTHON_ENV=production
    depends_on:
      - postgres
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true

  # Template Service (Node.js)
  template-service:
    build:
      context: ./template-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    depends_on:
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=whatsapp_enhancement
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    secrets:
      - db_user
      - db_password

  # Redis Cache and Message Queue
  redis:
    image: redis:7.2
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2023-10-07
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_access_key
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_secret_key
    volumes:
      - minio_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    secrets:
      - minio_access_key
      - minio_secret_key

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
    labels:
      backup: daily
      retention: 30d
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  backend:
    driver: bridge
    internal: true
    enable_ipv6: false
    driver_opts:
      encrypted: "true"
    labels:
      environment: production
      project: whatsapp-enhancement

configs:
  logging_config:
    file: ./configs/logging.conf

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_user:
    file: ./secrets/db_user.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  minio_access_key:
    file: ./secrets/minio_access_key.txt
  minio_secret_key:
    file: ./secrets/minio_secret_key.txt