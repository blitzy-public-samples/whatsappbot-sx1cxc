name: Contact Service CI/CD

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/contact-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/contact-service/**'

# Environment variables
env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  IMAGE_NAME: contact-service
  MIN_COVERAGE: 85

# Define permissions
permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  deployments: write

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/contact-service/requirements.txt
          pip install pytest pytest-cov pylint

      - name: Run linting
        run: |
          pylint --rcfile=src/backend/contact-service/.pylintrc src/backend/contact-service/src/

      - name: Run tests with coverage
        run: |
          pytest src/backend/contact-service/tests/ \
            --cov=src/backend/contact-service/src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results.xml

      - name: Verify coverage threshold
        run: |
          coverage_percentage=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$coverage_percentage < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
            echo "Coverage $coverage_percentage% is below minimum required ${{ env.MIN_COVERAGE }}%"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            test-results.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk

  build-and-push:
    name: Build and Push Container
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: ./src/backend/contact-service
          file: ./src/backend/contact-service/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          provenance: false
          sbom: true

  deploy:
    name: Deploy to Production
    needs: [build-and-push]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production
      url: https://api.example.com/contacts

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/contact-service \
            contact-service=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --record

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/contact-service --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          # Verify health endpoint
          curl -f https://api.example.com/contacts/health || exit 1

      - name: Monitor deployment metrics
        run: |
          kubectl logs -l app=contact-service --tail=100