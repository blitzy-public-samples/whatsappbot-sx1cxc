name: Analytics Service CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/backend/analytics-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/backend/analytics-service/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: analytics-service
  MIN_COVERAGE: 90
  CACHE_KEY_PREFIX: analytics-service-v1

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/analytics-service/requirements.txt'

      - name: Install dependencies
        working-directory: src/backend/analytics-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-sugar

      - name: Run tests with coverage
        working-directory: src/backend/analytics-service
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing -n auto --junitxml=test-results.xml

      - name: Verify code formatting
        working-directory: src/backend/analytics-service
        run: |
          black --check .
          isort --check-only .

      - name: Run linting and type checking
        working-directory: src/backend/analytics-service
        run: |
          flake8 .
          mypy src --strict

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: src/backend/analytics-service/coverage.xml
          fail_ci_if_error: true
          flags: analytics-service
          verbose: true

      - name: Check minimum coverage
        run: |
          coverage_percentage=$(grep -Po '(?<=<coverage.*line-rate=")[^"]*' src/backend/analytics-service/coverage.xml)
          if (( $(echo "$coverage_percentage*100 < $MIN_COVERAGE" | bc -l) )); then
            echo "Code coverage ($coverage_percentage%) is below minimum required ($MIN_COVERAGE%)"
            exit 1
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=src/backend/analytics-service/requirements.txt --project-name=analytics-service

      - name: Run container security scan
        uses: snyk/actions/docker@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          args: --file=src/backend/analytics-service/Dockerfile

  build:
    name: Build and Push
    needs: [test, security]
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: src/backend/analytics-service
          file: src/backend/analytics-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

  deploy:
    name: Deploy to Environment
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update EKS deployment
        run: |
          aws eks update-kubeconfig --name whatsapp-web-enhancement-cluster
          kubectl rollout restart deployment/analytics-service -n production
          kubectl rollout status deployment/analytics-service -n production --timeout=300s

      - name: Verify deployment health
        run: |
          kubectl wait --for=condition=available deployment/analytics-service -n production --timeout=300s
          curl -f https://api.analytics.whatsapp-web-enhancement.com/health || exit 1